<% title "[Moderate] " + @moderatable.title %>

<% cache(cache_key_heroku_slug("mod-styling")) do %>
  <style>
    <%= Rails.application.assets["moderators.css"].to_s.html_safe %>
  </style>
<% end %>

<div class="container mod-container" style="text-align: center">
  <h2><a href="<%= @moderatable.path %>" rel="nofollow"><%= @moderatable.title %></a></h2>
  <h3><a href="<%= @moderatable.user.path %>">@<%= @moderatable.user.username %></a></h3>
  <% if @moderatable.class.name == "Article" &&
       (Tag.where(requires_approval: true).pluck(:name) & @moderatable.decorate.cached_tag_list_array).any? &&
       (current_user.any_admin? || @tag_moderator_tags.any? { |tag| @moderatable.tag_list.include?(tag.name) }) %>
    <%= form_tag "/article_approvals", method: "post" do %>
      <%= hidden_field_tag(:id, @moderatable.id) %>
      <% if @moderatable.approved %>
        <%= hidden_field_tag(:approved, false) %>
        <button class="cta approval-button approval-removal">Remove approval</button>
      <% else %>
        <%= hidden_field_tag(:approved, true) %>
        <button class="cta approval-button">Mark as approved</button>
      <% end %>
    <% end %>
    <hr />
  <% end %>

  <div style="display: flex; justify-content: space-around;">
  <button class="reaction-button <%= Reaction.cached_any_reactions_for?(@moderatable, current_user, "thumbsup") ? "reacted" : "" %>"
          data-reactable-id="<%= @moderatable.id %>"
          data-category="thumbsup"
          data-reactable-type="<%= @moderatable.class.name %>">
    <div class="reaction-button-circle">
      <%= image_tag("emoji/emoji-one-thumbs-up-gray.png", alt: "Thumbs up emoji", class: "emoji-grey") %>
      <img class="reacted-emoji" src="<%= asset_path("emoji/emoji-one-thumbs-up.png") %>" alt="Thumbs up emoji" />
      <%= inline_svg_tag("checkmark.svg", aria: true, class: "crayons-icon reaction-checkmark", title: "Checkmark") %>
    </div>
    <span class="vote-text">High Quality</span>
  </button>
    <button class="reaction-button <%= Reaction.cached_any_reactions_for?(@moderatable, current_user, "thumbsdown") ? "reacted" : "" %>"
            data-reactable-id="<%= @moderatable.id %>"
            data-category="thumbsdown"
            data-reactable-type="<%= @moderatable.class.name %>">
      <div class="reaction-button-circle">
        <%= image_tag("emoji/emoji-one-thumbs-down-gray.png", alt: "Thumbs down emoji", class: "emoji-grey") %>
        <img class="reacted-emoji downvote" src="<%= asset_path("emoji/emoji-one-thumbs-down.png") %>" alt="Thumbs down emoji" />
        <%= inline_svg_tag("checkmark.svg", aria: true, class: "crayons-icon reaction-checkmark", title: "Checkmark") %>
      </div>
      <span class="vote-text">Low Quality</span>
    </button>
    <button class="reaction-button <%= Reaction.cached_any_reactions_for?(@moderatable, current_user, "vomit") ? "reacted" : "" %>"
            data-reactable-id="<%= @moderatable.id %>"
            data-category="vomit"
            data-reactable-type="<%= @moderatable.class.name %>">
      <div class="reaction-button-circle">
        <%= image_tag("emoji/emoji-one-nausea-face-gray.png", alt: "Nausea face emoji", class: "emoji-grey") %>
        <img class="reacted-emoji" src="<%= asset_path("emoji/emoji-one-nausea-face.png") %>" alt="Nausea down emoji" />
        <%= inline_svg_tag("checkmark.svg", aria: true, class: "crayons-icon reaction-checkmark", title: "Checkmark") %>
      </div>
      <span class="vote-text">Mark As Spam</span>
    </button>
  </div>

  <% if current_user.has_role?(:super_admin) && @moderatable.class.name == "Article" %>
    <h3> <a href="<%= @moderatable.path %>/edit">Edit Post</a> |
      <a href="/internal/articles/<%= @moderatable.id %>" data-no-instant>Internal:Article</a> |
      <a href="/admin/articles/<%= @moderatable.id %>" data-no-instant>Admin:Article</a></h3>
  <% elsif current_user.has_role?(:super_admin) && @moderatable.class.name == "Comment" %>
    <h3> <a href="/admin/comments/<%= @moderatable.id %>" data-no-instant>Admin:Comment</a> |
      <a href="/admin/users/<%= @moderatable.user_id %>" data-no-instant>Admin:User</a></h3>
  <% end %>
  <p>
    <b style="font-size:1em">All negative reactions are private.</b>
  </p>
  <p>
    Use <b>High Quality</b> to move this content "up" for any reason (quality, usefulness, etc.).
    <br />
    Use <b>Low Quality</b> to move this content "down" for any reason (quality, usefulness, etc.).
    <br />
    Use <b>Mark As Spam</b> for code of conduct violations (harassment, being a jerk, spam, etc.).
  </p>
  <div class="tag-mod-form" style="display: flex; flex-direction: column; align-items: center;">
    <h2>Flag <a href="<%= @moderatable.user.path %>"><%= @moderatable.user.username %></a> as Abusive</h2>
    <button class="reaction-button <%= Reaction.cached_any_reactions_for?(@moderatable, current_user, "vomit") ? "reacted" : "" %>"
            data-reactable-id="<%= @moderatable.user.id %>"
            data-category="vomit"
            data-reactable-type="<%= @moderatable.user.class.name %>">
      <div class="reaction-button-circle">
        <%= image_tag("emoji/emoji-one-nausea-face-gray.png", alt: "Nausea face emoji", class: "emoji-grey") %>
        <img class="reacted-emoji" src="<%= asset_path("emoji/emoji-one-nausea-face.png") %>" alt="Nausea down emoji" />
        <%= inline_svg_tag("checkmark.svg", aria: true, class: "crayons-icon reaction-checkmark", title: "Checkmark") %>
      </div>
      <span class="vote-text">Flag As Abusive</span>
    </button>
    <p>
      This is the equivalent of vomiting on <b>all</b> of this user's articles.
    </p>
  </div>
  <% if @hidden_comments.present? %>
    <div class="tag-mod-form">
      <h2>Hidden Comments</h2>
      <form>
        <ul id="hidden-comments">
        <% @hidden_comments.each do |comment| %>
          <li>
            <a href="<%= comment.path %>">Comment by <%= comment.user.username %></a>
          </li>
        <% end %>
        </ul>
      </form>
    </div>
  <% end %>
  <% if @allowed_to_adjust %>
    <div class="tag-mod-form">
      <h2>Tag Adjustments</h2>
      <%= form_for(@tag_adjustment) do |f| %>
        <b>Current live tags:</b> <%= @moderatable.tag_list %><br>
        <% if @tag_adjustment.errors.any? %>
          <div id="error_explanation">
            <h2><%= pluralize(@tag_adjustment.errors.count, "error") %> prohibited this block from being saved:</h2>
            <ul>
              <% @tag_adjustment.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>
        <%= f.hidden_field :article_id, value: @moderatable.id %>
        <% if current_user.any_admin? || @tag_moderator_tags.any? { |tag| @moderatable.tag_list.include?(tag.name) } %>
          <div class="tag-mod-addition-radio">
            <%= f.radio_button :adjustment_type, "removal", required: true %>
            <%= f.label :adjustment_type, "Remove", value: "removal" %>
          </div>
        <% end %>
        <% if @moderatable.tag_list.size < 4 %>
          <div class="tag-mod-addition-radio">
            <%= f.radio_button :adjustment_type, "addition", required: true %>
            <%= f.label :adjustment_type, "Add", value: "addition" %>
          </div>
        <% end %>
        <% if current_user.has_role?(:super_admin) %>
          <%= f.text_field :tag_name, placeholder: "Tag Name", required: true %>
        <% else %>
          <%= f.select :tag_name, @tag_moderator_tags, { prompt: "Select Tag" }, required: true %>
        <% end %>
        <%= f.text_area :reason_for_adjustment, placeholder: "Reason for adjustment (Be super kind) - Only the reason is needed, the notification will take care of the rest.", required: true %>
        <%= f.submit "Submit Tag Adjustment" %>
      <% end %>
      <% if @adjustments.present? %>
        <% @adjustments.each do |adjustment| %>
          <% if current_user.any_admin? || adjustment.user_id == current_user.id %>
            <%= form_for(adjustment, url: "/tag_adjustments/#{adjustment.id}", html: { method: :delete, onsubmit: "return confirm('Are you sure you want to undo the #{adjustment.adjustment_type} of the #{adjustment.tag_name} tag?')" }) do |f| %>
              <b><%= adjustment.adjustment_type == "removal" ? "Currently removed tag" : "Currently added tag" %>:</b> <%= adjustment.tag_name %>
              <%= f.submit "Ã—", id: "undo" %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>
    </div>
  <% end %>

  <% if @moderatable.class.name == "Article" %>
    <div class="tag-mod-form">
      <% @rating_vote = RatingVote.where(article_id: @moderatable.id, user_id: current_user.id).first %>
      <% rating_hash = { "Novice" => 1, "Beginner" => 2, "Mid-level" => 3, "Advanced" => 4, "Expert" => 5 } %>

      <h2>Experience Level of Post</h2>

      <% rating_hash.each do |rating_name, rating_level| %>
      <button
        value="<%= rating_level %>"
        name="rating_vote_<%= rating_level %>"
        id="js__rating__vote__<%= rating_level %>"
        class="level-rating-button article-mod-page <%= "selected" if @rating_vote&.rating == rating_level.to_f %>"
        data-user-id="<%= current_user.id %>"
        data-article-id="<%= @moderatable.id %>"
        data-group="experience_level"
        style="margin: 0.5rem 0;">
        <div class="level-rating-content">
          <span class="level-rating-number"><%= rating_level %> - </span>
          <span class="level-rating-text"><%= rating_name %></span>
        </div>
      </button>
      <% end %>
      <p>
        Who <em>might</em> find this post most valuable, based on overall experience level?
      </p>
    </div>
    <% if @moderatable.last_buffered.blank? %>
      <div class="tag-mod-form">
        <%= form_for(BufferUpdate.new) do |f| %>
          <h2>Suggest a Tweet for @<%= SiteConfig.social_media_handles["twitter"] %></h2>
          <%= f.hidden_field :article_id, value: @moderatable.id %>
          <%= f.text_area :body_text, maxlength: 220, placeholder: "Can be a TLDR of the post, an interesting quote from the post, or bullet points from topics covered in the post, etc." %>
          <%= f.submit "Share Tweet Suggestion" %>
        <% end %>
      </div>
    <% end %>
  <% end %>
</div>

<script defer>
  setTimeout(function () {
    var butts = document.querySelectorAll('.reaction-button, .reaction-vomit-button');
    function applyReactedClass(category) {
      const upVote = document.querySelector("[data-category='thumbsup']");
      const downVote = document.querySelector("[data-category='thumbsdown']");
      const vomitVote = document.querySelector("[data-category='vomit']");

      if (category === 'thumbsup') {
        downVote.classList.remove('reacted');
        vomitVote.classList.remove('reacted');
      } else {
        upVote.classList.remove('reacted');
      }
    }
    for (var i = 0; i < butts.length; i++) {
      var butt = butts[i];
      butt.onclick = function (event) {
        event.preventDefault();
        var thisButt = this;
        applyReactedClass(thisButt.dataset.category);
        thisButt.classList.add('reacted');

        function successCb(response) {
          if (response.result === 'create') {
            thisButt.classList.add('reacted');
          } else {
            thisButt.classList.remove('reacted');
          }
        }

        var formData = new FormData();
        formData.append('reactable_type', thisButt.dataset.reactableType);
        formData.append('category', thisButt.dataset.category);
        formData.append('reactable_id', thisButt.dataset.reactableId);

        getCsrfToken()
          .then(sendFetch('reaction-creation', formData))
          .then(function (response) {
            if (response.status === 200) {
              response.json().then(successCb);
            }
          });
      };
    }

    // Experience-Level JS
    function clearExpLevels() {
      Array.from(
        document.getElementsByClassName('level-rating-button selected'),
      ).forEach((el) => {
        el.classList.remove('selected');
      });
    }

    async function updateExperienceLevel(currentUserId, articleId, rating, group) {
      try {
        const response = await fetch('/rating_votes', {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            'X-CSRF-Token': window.csrfToken,
            'Content-Type': 'application/json',
          },
          credentials: 'same-origin',
          body: JSON.stringify({
            user_id: currentUserId,
            article_id: articleId,
            rating,
            group,
          }),
        });

        const outcome = await response.json();

        if (outcome.result === 'Success') {
          clearExpLevels();
          document
            .getElementById(`js__rating__vote__${rating}`)
            .classList.add('selected');
        } else {
          // eslint-disable-next-line no-alert
          alert(outcome.error);
        }
      } catch (error) {
        // eslint-disable-next-line no-alert
        alert(error);
      }
    }
    document.querySelectorAll('.level-rating-button').forEach((btn) => {
      btn.addEventListener('click', () => {
        updateExperienceLevel(
          btn.dataset.userId,
          btn.dataset.articleId,
          btn.value,
          btn.dataset.group,
        );
      });
    });
  }, 200)
</script>
